        -:    0:Source:/home/culbec/OOP/Project-2-OOP-Cars/Headers/Car.h
        -:    0:Graph:/home/culbec/OOP/Project-2-OOP-Cars/cmake-build-debug-coverage/CMakeFiles/Project_2_OOP_Cars.dir/Sources/tests.cpp.gcno
        -:    0:Data:/home/culbec/OOP/Project-2-OOP-Cars/cmake-build-debug-coverage/CMakeFiles/Project_2_OOP_Cars.dir/Sources/tests.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <string>
        -:    4:#include <iostream>
        -:    5:
        -:    6:using std::string;
        -:    7:
        -:    8:class Car {
        -:    9:private:
        -:   10:    // O masina contine un ID unic - nr. inmatriculare
        -:   11:    // pe de alta parte, contine un model si un tip
        -:   12:    string regNumber, producer, model, type;
        -:   13:public:
        -:   14:    // constructor explicit, instantiaza un obiect cu anumite atribute
        -:   15:    /*
        -:   16:        @pre: atributele trebuie sa fie de tip string
        -:   17:        @post: se creeaza obiectul cu atributele specificate
        -:   18:    */
        -:   19:    Car(string, string, string, string);
        -:   20:
        -:   21:    // copy constructor
        -:   22:    Car(const Car &other);
        -:   23:
        -:   24:    // gettere peste atributele obiectului
        -:   25:    string getRegNumber() const;
        -:   26:
        -:   27:    string getProducer() const;
        -:   28:
        -:   29:    string getModel() const;
        -:   30:
        -:   31:    string getType() const;
        -:   32:
        -:   33:    // settere peste atributele obiectului, atribute ce pot fi modificate
        -:   34:    // am ales arbitrar ca acestea sa fie producatorul, modelul si tipul
        -:   35:    /*
        -:   36:        @pre: atributele trebuie sa fie de tip string, fiind de asemenea o referinta
        -:   37:        @post: obiectul isi modifica atributele specificate
        -:   38:    */
        -:   39:    void setRegNumber(const string &);
        -:   40:
        -:   41:    void setProducer(const string &);
        -:   42:
        -:   43:    void setModel(const string &);
        -:   44:
        -:   45:    void setType(const string &);
        -:   46:
        -:   47:    // overriding operators
function _ZNK3CareqERKS_ called 0 returned 0% blocks executed 0%
    #####:   48:    bool operator==(const Car &otherCar) const {
    #####:   49:        return this->getRegNumber() == otherCar.getRegNumber();
    %%%%%:   49-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   49-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   49-block  2
call    6 never executed
call    7 never executed
call    8 never executed
    %%%%%:   49-block  3
    $$$$$:   49-block  4
    $$$$$:   49-block  5
call    9 never executed
        -:   50:    }
        -:   51:
        -:   52:    friend std::ostream &operator<<(std::ostream &os, const Car &car) {
        -:   53:        os << car.getRegNumber() << " | " << car.getProducer() << " | " << car.getModel() << " | " << car.getType() << "\n";
        -:   54:        return os;
        -:   55:    }
        -:   56:};
        -:   57:
        -:   58:
