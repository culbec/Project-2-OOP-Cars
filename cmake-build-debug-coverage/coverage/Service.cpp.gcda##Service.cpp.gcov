        -:    0:Source:/home/culbec/OOP/Project-2-OOP-Cars/Sources/Service.cpp
        -:    0:Graph:/home/culbec/OOP/Project-2-OOP-Cars/cmake-build-debug-coverage/CMakeFiles/Project_2_OOP_Cars.dir/Sources/Service.cpp.gcno
        -:    0:Data:/home/culbec/OOP/Project-2-OOP-Cars/cmake-build-debug-coverage/CMakeFiles/Project_2_OOP_Cars.dir/Sources/Service.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "../Headers/Service.h"
        -:    2:
function _ZNK7Service7getCarsEv called 26 returned 100% blocks executed 100%
       26:    3:const carList& Service::getCars() const { return this->carRepository.getCars(); }
       26:    3-block  0
call    0 returned 26
        -:    4:
function _ZN7Service13addCarServiceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_ called 19 returned 95% blocks executed 53%
       19:    5:bool Service::addCarService(const string &regNumber, const string &producer, const string &model, const string &type) {
       19:    6:    Car carToAdd(regNumber, producer, model, type); // initializing the car to add
       19:    6-block  0
call    0 returned 19
branch  1 taken 19 (fallthrough)
branch  2 taken 0 (throw)
       19:    6-block  1
call    3 returned 19
branch  4 taken 19 (fallthrough)
branch  5 taken 0 (throw)
       19:    6-block  2
call    6 returned 19
branch  7 taken 19 (fallthrough)
branch  8 taken 0 (throw)
       19:    6-block  3
call    9 returned 19
branch 10 taken 19 (fallthrough)
branch 11 taken 0 (throw)
       19:    6-block  4
call   12 returned 19
branch 13 taken 19 (fallthrough)
branch 14 taken 0 (throw)
       19:    6-block  5
call   15 returned 19
call   16 returned 19
call   17 returned 19
call   18 returned 19
    $$$$$:    6-block  6
call   19 never executed
    $$$$$:    6-block  7
    $$$$$:    6-block  8
call   20 never executed
    $$$$$:    6-block  9
    $$$$$:    6-block 10
call   21 never executed
    $$$$$:    6-block 11
    $$$$$:    6-block 12
call   22 never executed
    $$$$$:    6-block 13
        -:    7:
       19:    8:    Validator::validateCar(carToAdd, this->carRepository); // may have an exception, but it is handled by the repository
call    0 returned 19
branch  1 taken 18 (fallthrough)
branch  2 taken 1 (throw)
        -:    9:
        -:   10:    // daca e cu succes, adaugam masina
       18:   11:    this->carRepository.addCar(carToAdd);
       18:   11-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:   12:    this->undoList.push_back(std::make_unique<UndoAdauga>(UndoAdauga{carToAdd, this->carRepository}));
       18:   12-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
       18:   12-block  1
call    3 returned 18
branch  4 taken 18 (fallthrough)
branch  5 taken 0 (throw)
       18:   12-block  2
call    6 returned 18
call    7 returned 18
branch  8 taken 18 (fallthrough)
branch  9 taken 0 (throw)
       18:   12-block  3
call   10 returned 18
call   11 returned 18
call   12 returned 18
    $$$$$:   12-block  4
call   13 never executed
    $$$$$:   12-block  5
call   14 never executed
    $$$$$:   12-block  6
call   15 never executed
    $$$$$:   12-block  7
    $$$$$:   12-block  8
    $$$$$:   12-block  9
       18:   13:    return true;
       18:   13-block  0
       19:   14:}
call    0 returned 18
        1:   14-block  0
call    1 returned 1
        -:   15:
function _ZN7Service16modifyCarServiceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_ called 4 returned 50% blocks executed 56%
        4:   16:Car Service::modifyCarService(const string &regNumber, const string &newProducer, const string &newModel,
        -:   17:                              const string &newType) {
        4:   18:    Car carModified(regNumber, newProducer, newModel, newType); // initializing the modified car
        4:   18-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   18-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4:   18-block  2
call    6 returned 4
branch  7 taken 4 (fallthrough)
branch  8 taken 0 (throw)
        4:   18-block  3
call    9 returned 4
branch 10 taken 4 (fallthrough)
branch 11 taken 0 (throw)
        4:   18-block  4
call   12 returned 4
branch 13 taken 4 (fallthrough)
branch 14 taken 0 (throw)
        4:   18-block  5
call   15 returned 4
call   16 returned 4
call   17 returned 4
call   18 returned 4
    $$$$$:   18-block  6
call   19 never executed
    $$$$$:   18-block  7
    $$$$$:   18-block  8
call   20 never executed
    $$$$$:   18-block  9
    $$$$$:   18-block 10
call   21 never executed
    $$$$$:   18-block 11
    $$$$$:   18-block 12
call   22 never executed
    $$$$$:   18-block 13
        -:   19:
        -:   20:    // salvam erorile de la validari
        4:   21:    string validationErrors;
call    0 returned 4
        -:   22:
        -:   23:    try {
        4:   24:        Validator::validateProducer(carModified); // exception handled by the validator
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1 (throw)
        -:   25:    }
        1:   26:    catch (ValidatorException &vE) { validationErrors += vE.getMessage(); }
        1:   26-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   26-block  1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   26-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   26-block  3
call    9 returned 1
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
    $$$$$:   26-block  4
call   13 never executed
    $$$$$:   26-block  5
    $$$$$:   26-block  6
call   14 never executed
        -:   27:
        -:   28:    try {
        4:   29:        Validator::validateModel(carModified); // exception handled by the validator
        4:   29-block  0
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1 (throw)
        -:   30:    }
        1:   31:    catch (ValidatorException &vE) { validationErrors += vE.getMessage(); }
        1:   31-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   31-block  1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   31-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   31-block  3
call    9 returned 1
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
    $$$$$:   31-block  4
call   13 never executed
    $$$$$:   31-block  5
    $$$$$:   31-block  6
call   14 never executed
        -:   32:
        -:   33:    try {
        4:   34:        Validator::validateType(carModified); // exception handled by the validator
        4:   34-block  0
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1 (throw)
        -:   35:    }
        1:   36:    catch (ValidatorException &vE) { validationErrors += vE.getMessage(); }
        1:   36-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:   36-block  1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   36-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   36-block  3
call    9 returned 1
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
    $$$$$:   36-block  4
call   13 never executed
    $$$$$:   36-block  5
    $$$$$:   36-block  6
call   14 never executed
        -:   37:
        4:   38:    if (!validationErrors.empty())
        4:   38-block  0
call    0 returned 4
branch  1 taken 1 (fallthrough)
branch  2 taken 3
        1:   39:        throw ServiceException(validationErrors);
        1:   39-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   39-block  1
call    4 returned 1
call    5 returned 1
call    6 returned 1
    $$$$$:   39-block  2
    $$$$$:   39-block  3
call    7 never executed
        -:   40:
        -:   41:    // daca e cu succes, modificam masina
        3:   42:    Car oldCar = this->carRepository.modifyCar(carModified); // exception handled by the repository
        3:   42-block  0
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1 (throw)
        2:   43:    this->undoList.push_back(std::make_unique<UndoModifica>(UndoModifica{oldCar, this->carRepository}));
        2:   43-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   43-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   43-block  2
call    6 returned 2
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2:   43-block  3
call   10 returned 2
call   11 returned 2
call   12 returned 2
    $$$$$:   43-block  4
call   13 never executed
    $$$$$:   43-block  5
call   14 never executed
    $$$$$:   43-block  6
call   15 never executed
    $$$$$:   43-block  7
    $$$$$:   43-block  8
    $$$$$:   43-block  9
        4:   44:    return oldCar;
        2:   44-block  0
        6:   45:}
        2:   45-block  0
call    0 returned 2
call    1 returned 2
    $$$$$:   45-block  1
call    2 never executed
        2:   45-block  2
call    3 returned 2
        2:   45-block  3
call    4 returned 2
        -:   46:
function _ZN7Service16deleteCarServiceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 67% blocks executed 52%
        3:   47:Car Service::deleteCarService(const string &regNumberToDelete) {
        -:   48:    // returnam direct rezultatul stergerii
        -:   49:    // daca exista exceptie, va fi gestionata de repo
        3:   50:    Car deletedCar = this->carRepository.deleteCar(regNumberToDelete);
        3:   50-block  0
call    0 returned 2
        2:   51:    this->undoList.push_back(std::make_unique<UndoDelete>(UndoDelete{deletedCar, this->carRepository}));
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   51-block  0
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   51-block  1
call    6 returned 2
call    7 returned 2
branch  8 taken 2 (fallthrough)
branch  9 taken 0 (throw)
        2:   51-block  2
call   10 returned 2
call   11 returned 2
call   12 returned 2
    $$$$$:   51-block  3
call   13 never executed
    $$$$$:   51-block  4
call   14 never executed
    $$$$$:   51-block  5
call   15 never executed
    $$$$$:   51-block  6
    $$$$$:   51-block  7
    $$$$$:   51-block  8
        2:   52:    return deletedCar;
        2:   52-block  0
    =====:   53:}
    $$$$$:   53-block  0
call    0 never executed
        -:   54:
function _ZN7Service14findCarServiceERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 67% blocks executed 100%
        3:   55:Car Service::findCarService(const string &regNumberToFind) {
        -:   56:    // cautam masina prin intermediul repo
        -:   57:    // si returnam masina de pe pozitia gasita
        -:   58:
        3:   59:    const unsigned int foundPosition = this->carRepository.findCar(regNumberToFind);
        3:   59-block  0
call    0 returned 2
        -:   60:
        2:   61:    return this->carRepository.getCars().at(foundPosition);
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:   62:}
        -:   63:
function _ZNK7Service6filterERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFbRK3CarS7_E called 6 returned 67% blocks executed 77%
        6:   64:carList Service::filter(const string &whatFilter, bool(*compareMethod)(const Car &, const string &)) const {
        6:   65:    carList filteredCars; // initializam o lista vida
        6:   65-block  0
call    0 returned 6
        -:   66:
        -:   67:    // iteram prin lista
        6:   68:    const carList &currentCarList = this->carRepository.getCars();
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        -:   69:
       30:   70:    for (auto &car: currentCarList)
        6:   70-block  0
call    0 returned 6
call    1 returned 6
       24:   70-block  1
call    2 returned 24
       24:   70-block  2
call    3 returned 24
       30:   70-block  3
call    4 returned 30
branch  5 taken 24
branch  6 taken 6 (fallthrough)
       24:   71:        if (compareMethod(car, whatFilter))
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0 (throw)
       24:   71-block  0
branch  3 taken 6 (fallthrough)
branch  4 taken 18
        6:   72:            filteredCars.push_back(car);
        6:   72-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        -:   73:
        -:   74:    // aruncam exceptie daca lista e goala
        6:   75:    if (filteredCars.empty())
        6:   75-block  0
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        2:   76:        throw ServiceException("Nu s-au gasit masini cu parametrul specificat!\n");
        2:   76-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:   76-block  1
call    5 returned 2
call    6 returned 2
call    7 returned 2
call    8 returned 2
    $$$$$:   76-block  2
call    9 never executed
    $$$$$:   76-block  3
    $$$$$:   76-block  4
    $$$$$:   76-block  5
call   10 never executed
        -:   77:
        -:   78:    // altfel, returnam lista
        4:   79:    return filteredCars;
        4:   79-block  0
        4:   79-block  1
        2:   80:}
        2:   80-block  0
call    0 returned 2
        -:   81:
        -:   82:/*carList Service::generalSort(carList list, bool (*compareMethod)(const Car &, const Car &)) {
        -:   83:    for(auto i = 0; i < list.size() - 1; i++)
        -:   84:        for(auto j = i + 1; j < list.size(); j++)
        -:   85:            if(compareMethod(list.at(i), list.at(j)))
        -:   86:                list.swap(i, j);
        -:   87:    return list;
        -:   88:}*/
        -:   89:
function _ZN7Service13sortRegNumberERKSt6vectorI3CarSaIS1_EE called 1 returned 100% blocks executed 88%
        1:   90:carList Service::sortRegNumber(const carList &list) {
        -:   91:    /*return Service::generalSort(Repository::copyList(list), [](const Car &car1, const Car &car2) {
        -:   92:        return car1.getRegNumber() > car2.getRegNumber();
        -:   93:    });*/
        1:   94:    carList toSort = this->carRepository.copyList(list);
        1:   94-block  0
call    0 returned 1
        -:   95:
function _ZZN7Service13sortRegNumberERKSt6vectorI3CarSaIS1_EEENKUlRKS1_S7_E_clES7_S7_ called 6 returned 100% blocks executed 73%
        1:   96:    sort(toSort.begin(), toSort.end(), [](const Car &car1, const Car &car2) {
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        6:   97:        return car1.getRegNumber() < car2.getRegNumber();
        6:   97-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   97-block  1
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
        6:   97-block  2
call    6 returned 6
call    7 returned 6
call    8 returned 6
        6:   97-block  3
    $$$$$:   97-block  4
    $$$$$:   97-block  5
call    9 never executed
        -:   98:    });
        -:   99:
        1:  100:    return toSort;
        1:  100-block  0
        1:  100-block  1
    =====:  101:}
    $$$$$:  101-block  0
call    0 never executed
        -:  102:
function _ZN7Service8sortTypeERKSt6vectorI3CarSaIS1_EE called 1 returned 100% blocks executed 88%
        1:  103:carList Service::sortType(const carList &list) {
        -:  104:    /*return Service::generalSort(Repository::copyList(list), [](const Car &car1, const Car &car2) {
        -:  105:        return car1.getType() > car2.getType();
        -:  106:    });*/
        1:  107:    carList toSort = this->carRepository.copyList(list);
        1:  107-block  0
call    0 returned 1
        -:  108:
function _ZZN7Service8sortTypeERKSt6vectorI3CarSaIS1_EEENKUlRKS1_S7_E_clES7_S7_ called 5 returned 100% blocks executed 73%
        1:  109:    sort(toSort.begin(), toSort.end(), [](const Car &car1, const Car &car2) {
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        5:  110:        return car1.getType() < car2.getType();
        5:  110-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:  110-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5:  110-block  2
call    6 returned 5
call    7 returned 5
call    8 returned 5
        5:  110-block  3
    $$$$$:  110-block  4
    $$$$$:  110-block  5
call    9 never executed
        -:  111:    });
        -:  112:
        1:  113:    return toSort;
        1:  113-block  0
        1:  113-block  1
    =====:  114:}
    $$$$$:  114-block  0
call    0 never executed
        -:  115:
function _ZN7Service17sortProducerModelERKSt6vectorI3CarSaIS1_EE called 1 returned 100% blocks executed 88%
        1:  116:carList Service::sortProducerModel(const carList &list) {
        -:  117:    /*return Service::generalSort(Repository::copyList(list), [](const Car &car1, const Car &car2) {
        -:  118:        if (car1.getProducer() == car2.getProducer())
        -:  119:            return car1.getModel() > car2.getModel();
        -:  120:        return car1.getProducer() > car2.getProducer();
        -:  121:    });*/
        1:  122:    carList toSort = this->carRepository.copyList(list);
        1:  122-block  0
call    0 returned 1
        -:  123:
function _ZZN7Service17sortProducerModelERKSt6vectorI3CarSaIS1_EEENKUlRKS1_S7_E_clES7_S7_ called 3 returned 100% blocks executed 65%
        1:  124:    sort(toSort.begin(), toSort.end(), [](const Car &car1, const Car &car2) {
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        3:  125:        if (car1.getProducer() == car2.getProducer())
        3:  125-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  125-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:  125-block  2
call    6 returned 3
call    7 returned 3
call    8 returned 3
branch  9 taken 1 (fallthrough)
branch 10 taken 2
    $$$$$:  125-block  3
    $$$$$:  125-block  4
call   11 never executed
    $$$$$:  125-block  5
call   12 never executed
        1:  126:            return car1.getModel() < car2.getModel();
        1:  126-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  126-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  126-block  2
call    6 returned 1
call    7 returned 1
call    8 returned 1
    $$$$$:  126-block  3
    $$$$$:  126-block  4
call    9 never executed
    $$$$$:  126-block  5
call   10 never executed
        2:  127:        return car1.getProducer() < car2.getProducer();
        2:  127-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  127-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  127-block  2
call    6 returned 2
call    7 returned 2
call    8 returned 2
    $$$$$:  127-block  3
    $$$$$:  127-block  4
call    9 never executed
        -:  128:    });
        -:  129:
        1:  130:    return toSort;
        1:  130-block  0
        1:  130-block  1
    =====:  131:}
    $$$$$:  131-block  0
call    0 never executed
        -:  132:
function _ZNK7Service14getWashingListEv called 2 returned 100% blocks executed 100%
        2:  133:WashingList Service::getWashingList() const {
        2:  134:    return this->washingList;
        2:  134-block  0
call    0 returned 2
        -:  135:}
        -:  136:
function _ZN7Service16addToWashingListERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 67% blocks executed 69%
        3:  137:void Service::addToWashingList(const std::string &regNumber) {
function _ZZN7Service16addToWashingListERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRK3CarE_clESA_ called 9 returned 100% blocks executed 100%
        3:  138:    auto found = std::find_if(this->getCars().begin(), this->getCars().end(), [regNumber](const Car &car) {
        3:  138-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  138-block  1
call    3 returned 3
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:  138-block  2
call    7 returned 3
call    8 returned 3
branch  9 taken 3 (fallthrough)
branch 10 taken 0 (throw)
        3:  138-block  3
call   11 returned 3
    $$$$$:  138-block  4
call   12 never executed
    $$$$$:  138-block  5
        9:  139:        return car.getRegNumber() == regNumber;
        9:  139-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:  139-block  1
call    3 returned 9
call    4 returned 9
        9:  139-block  2
        -:  140:    });
        -:  141:
        3:  142:    if (found == this->getCars().end())
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  142-block  0
call    3 returned 3
call    4 returned 3
branch  5 taken 1 (fallthrough)
branch  6 taken 2
    $$$$$:  142-block  1
        1:  143:        throw ServiceException("Nu exista masina cu numarul de inmatriculare!\n");
        1:  143-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  143-block  1
call    5 returned 1
call    6 returned 1
call    7 returned 1
call    8 returned 1
    $$$$$:  143-block  2
call    9 never executed
    $$$$$:  143-block  3
    $$$$$:  143-block  4
    $$$$$:  143-block  5
call   10 never executed
        -:  144:
        2:  145:    this->washingList.addToWash(*found);
        2:  145-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        5:  146:}
        3:  146-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        2:  146-block  1
        -:  147:
function _ZN7Service16clearWashingListEv called 1 returned 100% blocks executed 100%
        1:  148:void Service::clearWashingList() {
        1:  149:    this->washingList.clearWash();
        1:  149-block  0
call    0 returned 1
        1:  150:}
        -:  151:
function _ZN7Service17randomWashingListEjRKSt6vectorI3CarSaIS1_EE called 1 returned 100% blocks executed 74%
        1:  152:void Service::randomWashingList(unsigned int numberToGenerate, const vector<Car> &cars) {
        1:  153:    vector<Car> toRandomize = this->carRepository.copyList(cars);
        1:  153-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  154:
        1:  155:    this->washingList.clearWash();
        1:  155-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  156:    vector<Car> randomWash = WashingList::generateRandom(numberToGenerate, toRandomize);
        1:  156-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:  157:    for (const auto &car: randomWash)
        1:  157-block  0
call    0 returned 1
call    1 returned 1
        2:  157-block  1
call    2 returned 2
        2:  157-block  2
call    3 returned 2
        3:  157-block  3
call    4 returned 3
branch  5 taken 2
branch  6 taken 1 (fallthrough)
        2:  158:        this->washingList.addToWash(car);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        1:  159:}
        1:  159-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:  159-block  1
call    2 never executed
    $$$$$:  159-block  2
call    3 never executed
        -:  160:
function _ZNK7Service11countModelsB5cxx11Ev called 1 returned 100% blocks executed 64%
        1:  161:std::unordered_map<string, DTO> Service::countModels() const {
        1:  162:    unordered_map<string, DTO> totalModels;
        1:  162-block  0
call    0 returned 1
        -:  163:
        5:  164:    for (const auto &car: this->getCars())
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  164-block  0
call    3 returned 1
call    4 returned 1
        4:  164-block  1
call    5 returned 4
        4:  164-block  2
call    6 returned 4
        5:  164-block  3
call    7 returned 5
branch  8 taken 4
branch  9 taken 1 (fallthrough)
        4:  165:        if (totalModels.find(car.getModel()) == totalModels.end()) {
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:  165-block  0
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4:  165-block  1
call    7 returned 4
call    8 returned 4
branch  9 taken 3 (fallthrough)
branch 10 taken 1
    $$$$$:  165-block  2
call   11 never executed
    $$$$$:  165-block  3
    $$$$$:  165-block  4
    $$$$$:  165-block  5
        3:  166:            auto model = car.getModel();
        3:  166-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
function _ZZNK7Service11countModelsB5cxx11EvENKUlRK3CarE_clES2_ called 12 returned 100% blocks executed 100%
        3:  167:            auto count = std::count_if(this->getCars().begin(), this->getCars().end(), [model](const Car &car) {
        3:  167-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  167-block  1
call    3 returned 3
call    4 returned 3
branch  5 taken 3 (fallthrough)
branch  6 taken 0 (throw)
        3:  167-block  2
call    7 returned 3
call    8 returned 3
branch  9 taken 3 (fallthrough)
branch 10 taken 0 (throw)
        3:  167-block  3
call   11 returned 3
    $$$$$:  167-block  4
call   12 never executed
    $$$$$:  167-block  5
       12:  168:                return car.getModel() == model;
       12:  168-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:  168-block  1
call    3 returned 12
call    4 returned 12
       12:  168-block  2
        -:  169:            });
        -:  170:
        3:  171:            DTO dto(model, count);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  171-block  0
call    3 returned 3
call    4 returned 3
    $$$$$:  171-block  1
        3:  172:            totalModels.insert({model, dto});
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  172-block  0
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:  172-block  1
call    6 returned 3
    $$$$$:  172-block  2
call    7 never executed
    $$$$$:  172-block  3
        3:  173:        }
call    0 returned 3
call    1 returned 3
    $$$$$:  173-block  0
call    2 never executed
    $$$$$:  173-block  1
call    3 never executed
        -:  174:
        1:  175:    return totalModels;
        1:  175-block  0
        1:  175-block  1
        3:  176:}
        3:  176-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  176-block  1
call    3 never executed
        -:  177:
function _ZN7Service12exportToFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 55%
        2:  178:void Service::exportToFile(const string &fileName) {
        2:  179:    std::ofstream fout(fileName);
        2:  179-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:  180:
        2:  181:    if (!fout.is_open()) {
        2:  181-block  0
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
    #####:  182:        throw ServiceException("Error open: " + fileName);
    %%%%%:  182-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  182-block  1
call    4 never executed
call    5 never executed
call    6 never executed
    $$$$$:  182-block  2
    $$$$$:  182-block  3
call    7 never executed
        -:  183:    }
        -:  184:
        4:  185:    for (const auto &car: this->washingList.washCars())
        2:  185-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  185-block  1
call    3 returned 2
call    4 returned 2
        2:  185-block  2
call    5 returned 2
        4:  185-block  3
call    6 returned 4
branch  7 taken 2
branch  8 taken 2 (fallthrough)
        4:  186:        fout << car.getRegNumber() << "," << car.getProducer() << "," << car.getModel() << "," << car.getType() << "\n";
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  186-block  0
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  186-block  1
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
        2:  186-block  2
call    9 returned 2
branch 10 taken 2 (fallthrough)
branch 11 taken 0 (throw)
        2:  186-block  3
call   12 returned 2
branch 13 taken 2 (fallthrough)
branch 14 taken 0 (throw)
        2:  186-block  4
call   15 returned 2
branch 16 taken 2 (fallthrough)
branch 17 taken 0 (throw)
        2:  186-block  5
call   18 returned 2
branch 19 taken 2 (fallthrough)
branch 20 taken 0 (throw)
        2:  186-block  6
call   21 returned 2
branch 22 taken 2 (fallthrough)
branch 23 taken 0 (throw)
        2:  186-block  7
call   24 returned 2
branch 25 taken 2 (fallthrough)
branch 26 taken 0 (throw)
        2:  186-block  8
call   27 returned 2
branch 28 taken 2 (fallthrough)
branch 29 taken 0 (throw)
        2:  186-block  9
call   30 returned 2
branch 31 taken 2 (fallthrough)
branch 32 taken 0 (throw)
        2:  186-block 10
call   33 returned 2
branch 34 taken 2 (fallthrough)
branch 35 taken 0 (throw)
        2:  186-block 11
call   36 returned 2
call   37 returned 2
call   38 returned 2
call   39 returned 2
call   40 returned 2
        2:  186-block 12
call   41 returned 2
    $$$$$:  186-block 13
call   42 never executed
    $$$$$:  186-block 14
    $$$$$:  186-block 15
call   43 never executed
    $$$$$:  186-block 16
    $$$$$:  186-block 17
call   44 never executed
    $$$$$:  186-block 18
    $$$$$:  186-block 19
call   45 never executed
    $$$$$:  186-block 20
    $$$$$:  186-block 21
call   46 never executed
        -:  187:
        2:  188:    fout.close();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  189:}
        2:  189-block  0
call    0 returned 2
    $$$$$:  189-block  1
call    1 never executed
        -:  190:
function _ZN7Service4undoEv called 3 returned 100% blocks executed 40%
        3:  191:void Service::undo() {
        3:  192:    if (this->undoList.empty()) {
        3:  192-block  0
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
    #####:  193:        throw ServiceException("Nu mai exista operatii.");
    %%%%%:  193-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  193-block  1
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
    $$$$$:  193-block  2
call    9 never executed
    $$$$$:  193-block  3
    $$$$$:  193-block  4
    $$$$$:  193-block  5
call   10 never executed
        -:  194:    }
        -:  195:
        -:  196:    // instantiem un pointer catre obiectul ActiuneUndo pe care trebuie sa-l folosim
        -:  197:    // std::unique_ptr<ActiuneUndo> undoAction = std::make_unique<ActiuneUndo>(this->undoList.back());
        3:  198:    this->undoList.back()->doUndo();
        3:  198-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
        3:  199:    this->undoList.pop_back();
call    0 returned 3
        3:  200:}
