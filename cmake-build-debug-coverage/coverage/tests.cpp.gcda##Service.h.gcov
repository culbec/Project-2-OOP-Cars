        -:    0:Source:/home/culbec/OOP/Project-2-OOP-Cars/Headers/Service.h
        -:    0:Graph:/home/culbec/OOP/Project-2-OOP-Cars/cmake-build-debug-coverage/CMakeFiles/Project_2_OOP_Cars.dir/Sources/tests.cpp.gcno
        -:    0:Data:/home/culbec/OOP/Project-2-OOP-Cars/cmake-build-debug-coverage/CMakeFiles/Project_2_OOP_Cars.dir/Sources/tests.cpp.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include "Validator.h"
        -:    4:#include "Repository.h"
        -:    5:#include "Spalatorie.h"
        -:    6:#include <algorithm>
        -:    7:
        -:    8:using std::sort;
        -:    9:using std::find_if;
        -:   10:using std::copy_if;
        -:   11:
        -:   12:class ServiceException : std::exception {
        -:   13:private:
        -:   14:    string errorMessage;
        -:   15:public:
        -:   16:    explicit ServiceException(string message) : errorMessage(std::move(message)) {}
        -:   17:
function _ZN16ServiceException10getMessageB5cxx11Ev called 1 returned 100% blocks executed 100%
        1:   18:    string getMessage() { return this->errorMessage; }
        1:   18-block  0
call    0 returned 1
        -:   19:};
        -:   20:
        -:   21:class Service {
        -:   22:private:
        -:   23:    // fiecare instanta de tip Service va contine un repository propriu si un validator propriu
        -:   24:    Repository carRepository;
        -:   25:    WashingList washingList;
        -:   26:
        -:   27:public:
        -:   28:    // definim un constructor implicit
function _ZN7ServiceC2Ev called 2 returned 100% blocks executed 100%
        2:   29:    Service() noexcept = default;
        2:   29-block  0
call    0 returned 2
call    1 returned 2
        -:   30:
        -:   31:    // functie care returneaza repo-ul service-ului
        -:   32:    //const Repository& getRepository() const;
        -:   33:
        -:   34:    const carList &getCars() const;
        -:   35:
        -:   36:    //// functie care returneaza validatorul service-ului
        -:   37:    //Validator getValidator() const;
        -:   38:
        -:   39:    /*
        -:   40:        Se adauga o masina in lista de masini.
        -:   41:        @pre: se primesc 4 parametrii de tip string, ce reprezinta parametrii masinii de adaugat
        -:   42:        @post: masina se adauga
        -:   43:        @exception: masina invalida sau deja exista in lista.
        -:   44:    */
        -:   45:
        -:   46:    bool addCarService(const string &, const string &, const string &, const string &);
        -:   47:
        -:   48:    /*
        -:   49:        Se modifica o masina din lista de masini
        -:   50:        @pre: se primesc 4 parametrii, de tip string, ce reprezinta:
        -:   51:              - numarul de inmatriculare al masinii de modificat;
        -:   52:              - parametrii ce masinii ce vor fi modificati;
        -:   53:        @post: masina cu parametrii specificati se modifica;
        -:   54:        @exception: masina invalida sau nu exista masina in lista;
        -:   55:    */
        -:   56:
        -:   57:    Car modifyCarService(const string &, const string &, const string &, const string &);
        -:   58:
        -:   59:    /*
        -:   60:        Se sterge o masina din lista de masini
        -:   61:        @pre: se primeste un parametru, de tip string, ce reprezinta numarul de inmatriculare al masinii de sters
        -:   62:        @post: se sterge masina
        -:   63:        @exception: nu exista masina in lista
        -:   64:    */
        -:   65:
        -:   66:    Car deleteCarService(const string &);
        -:   67:
        -:   68:    /*
        -:   69:        Cautare masina dupa numar de inmatriculare.
        -:   70:        @pre: parametru de tip string, ce reprezinta numarul masinii de inmatriculare al masinii de gasit
        -:   71:        @post: masina cu numarul de inmatriculare
        -:   72:        @exception: nu exista masina in lista
        -:   73:    */
        -:   74:
        -:   75:    Car findCarService(const string &);
        -:   76:
        -:   77:    carList filter(const string &, bool(*compareMethod)(const Car &, const string &)) const;
        -:   78:
function _ZN7Service17compareByProducerERK3CarRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 100% blocks executed 100%
       12:   79:    static bool compareByProducer(const Car &car, const string &producer) {
       12:   80:        return car.getProducer() == producer;
       12:   80-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:   80-block  1
call    3 returned 12
call    4 returned 12
       12:   80-block  2
        -:   81:    }
        -:   82:
function _ZN7Service13compareByTypeERK3CarRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 100% blocks executed 100%
       12:   83:    static bool compareByType(const Car &car, const string &type) {
       12:   84:        return car.getType() == type;
       12:   84-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:   84-block  1
call    3 returned 12
call    4 returned 12
       12:   84-block  2
        -:   85:    }
        -:   86:
        -:   87:    // functii de sortare
        -:   88:    // static carList generalSort(carList, bool(*compareMethod)(const Car &, const Car &));
        -:   89:
        -:   90:    static carList sortRegNumber(const carList &);
        -:   91:
        -:   92:    static carList sortType(const carList &);
        -:   93:
        -:   94:    static carList sortProducerModel(const carList &);
        -:   95:
        -:   96:    /**
        -:   97:     * @brief Returneaza lista masinilor pentru spalat
        -:   98:     * @pre true
        -:   99:     * @post true
        -:  100:     * @return lista masinilor pentru spalat
        -:  101:     */
        -:  102:     WashingList getWashingList() const;
        -:  103:
        -:  104:    /**
        -:  105:     * @brief Adauga o masina in lista pentru masinile de spalat
        -:  106:     * @pre Masina cu numarul de inmatriculare exista in lista
        -:  107:     * @post Se adauga masina in lista de masini de spalat
        -:  108:     * @exception Nu exista masina in lista de masini
        -:  109:     */
        -:  110:    void addToWashingList(const string &);
        -:  111:
        -:  112:    /**
        -:  113:     * @brief Goleste lista masinilor de spalat
        -:  114:     * @pre true
        -:  115:     * @post Lista masinilor de spalat se goleste
        -:  116:     */
        -:  117:    void clearWashingList();
        -:  118:
        -:  119:    /**
        -:  120:     * @brief Genereaza o lista random de masini de spalat
        -:  121:     * @pre true
        -:  122:     * @post Se genereaza lista random de masini de spalat
        -:  123:     */
        -:  124:    void randomWashingList(unsigned int, const vector<Car> &);
        -:  125:
        -:  126:};
