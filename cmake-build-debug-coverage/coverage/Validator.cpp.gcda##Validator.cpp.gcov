        -:    0:Source:/home/culbec/OOP/Project-2-OOP-Cars/Sources/Validator.cpp
        -:    0:Graph:/home/culbec/OOP/Project-2-OOP-Cars/cmake-build-debug-coverage/CMakeFiles/Project_2_OOP_Cars.dir/Sources/Validator.cpp.gcno
        -:    0:Data:/home/culbec/OOP/Project-2-OOP-Cars/cmake-build-debug-coverage/CMakeFiles/Project_2_OOP_Cars.dir/Sources/Validator.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "../Headers/Validator.h"
        -:    2:
function _ZN9Validator17validateRegNumberERK3Car called 38 returned 55% blocks executed 78%
       38:    3:bool Validator::validateRegNumber(const Car &car) {
       38:    4:    string errors; // vom pastra toate erorile
       38:    4-block  0
call    0 returned 38
        -:    5:
       38:    6:    string regNumber = car.getRegNumber(); // retinem numarul de inmatriculare
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
        -:    7:
        -:    8:    // verificam daca nr. de inmatriculare este string-ul vid
       38:    9:    if (regNumber.empty())
       38:    9-block  0
call    0 returned 38
branch  1 taken 3 (fallthrough)
branch  2 taken 35
        3:   10:        throw ValidatorException("Nr. de inmatriculare nu poate fi vid!"); // aruncam direct exceptie
        3:   10-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:   10-block  1
call    5 returned 3
call    6 returned 3
call    7 returned 3
call    8 returned 3
    $$$$$:   10-block  2
call    9 never executed
    $$$$$:   10-block  3
    $$$$$:   10-block  4
    $$$$$:   10-block  5
call   10 never executed
        -:   11:
        -:   12:    // verificam daca nr. de inmatriculare se incadreaza ca lungime intre 6 si 7
       35:   13:    if (regNumber.size() < 6 || regNumber.size() > 7)
       35:   13-block  0
call    0 returned 35
branch  1 taken 33 (fallthrough)
branch  2 taken 2
       33:   13-block  1
call    3 returned 33
branch  4 taken 0 (fallthrough)
branch  5 taken 33
        2:   13-block  2
       33:   13-block  3
       35:   13-block  4
branch  6 taken 2 (fallthrough)
branch  7 taken 33
        2:   14:        throw ValidatorException(
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:   14-block  0
call    4 returned 2
call    5 returned 2
call    6 returned 2
    $$$$$:   14-block  1
call    7 never executed
    $$$$$:   14-block  2
    $$$$$:   14-block  3
        4:   15:                "Nr. de inmatriculare trebuie sa fie de forma: \n Exemplu: CJ12CEVA, pentru toate judetele inafara de Bucuresti\n Exemplu: B76XZY sau B777ZZZ pentru judetul Bucuresti.\n");
        2:   15-block  0
call    0 returned 2
call    1 returned 2
    $$$$$:   15-block  1
call    2 never executed
        -:   16:
        -:   17:    // acum putem valida numarul de inmatriculare
       33:   18:    if (regNumber.at(0) == 'B' && !(regNumber.at(1) >= 'A' && regNumber.at(1) <= 'Z')) {
       33:   18-block  0
call    0 returned 33
branch  1 taken 33 (fallthrough)
branch  2 taken 0 (throw)
       33:   18-block  1
branch  3 taken 14 (fallthrough)
branch  4 taken 19
       14:   18-block  2
call    5 returned 14
branch  6 taken 14 (fallthrough)
branch  7 taken 0 (throw)
       14:   18-block  3
branch  8 taken 4 (fallthrough)
branch  9 taken 10
        4:   18-block  4
call   10 returned 4
branch 11 taken 4 (fallthrough)
branch 12 taken 0 (throw)
        4:   18-block  5
branch 13 taken 1 (fallthrough)
branch 14 taken 3
       11:   18-block  6
       22:   18-block  7
       33:   18-block  8
branch 15 taken 11 (fallthrough)
branch 16 taken 22
       11:   19:        if (regNumber.size() == 7) {
       11:   19-block  0
call    0 returned 11
branch  1 taken 6 (fallthrough)
branch  2 taken 5
       11:   20:            if ((regNumber.at(1) >= '1' && regNumber.at(1) <= '9') &&
        6:   20-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        5:   20-block  1
call    3 returned 5
branch  4 taken 5 (fallthrough)
branch  5 taken 0 (throw)
        5:   20-block  2
branch  6 taken 4 (fallthrough)
branch  7 taken 1
       15:   21:                (regNumber.at(2) >= '0' && regNumber.at(2) <= '9') &&
        6:   21-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 1
        4:   21-block  1
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
        4:   21-block  2
branch  5 taken 4 (fallthrough)
branch  6 taken 0
        4:   21-block  3
call    7 returned 4
branch  8 taken 4 (fallthrough)
branch  9 taken 0 (throw)
        4:   21-block  4
branch 10 taken 4 (fallthrough)
branch 11 taken 0
        4:   21-block  5
        2:   21-block  6
        6:   21-block  7
branch 12 taken 4 (fallthrough)
branch 13 taken 2
        4:   22:                (regNumber.at(3) >= '0' && regNumber.at(3) <= '9')) { //numar de genul B132XYZ
        4:   22-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   22-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 0
        4:   22-block  2
call    5 returned 4
branch  6 taken 4 (fallthrough)
branch  7 taken 0 (throw)
        4:   22-block  3
branch  8 taken 4 (fallthrough)
branch  9 taken 0
        4:   23:                if (!(regNumber.at(4) >= 'A' && regNumber.at(4) <= 'Z')) errors = errors + "Caracterul de pe pozitia 5 trebuie sa fie litera majuscula!\n";
        4:   23-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   23-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 1
        3:   23-block  2
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3:   23-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 3
        1:   23-block  4
        3:   23-block  5
        4:   23-block  6
branch 10 taken 1 (fallthrough)
branch 11 taken 3
        1:   23-block  7
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
        1:   23-block  8
call   15 returned 1
call   16 returned 1
    $$$$$:   23-block  9
       3*:   24:                else if (!(regNumber.at(5) >= 'A' && regNumber.at(5) <= 'Z')) errors = errors + "Caracterul de pe pozitia 6 trebuie sa fie litera majuscula!\n";
        3:   24-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   24-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 0
        3:   24-block  2
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3:   24-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 3
    %%%%%:   24-block  4
        3:   24-block  5
        3:   24-block  6
branch 10 taken 0 (fallthrough)
branch 11 taken 3
    %%%%%:   24-block  7
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:   24-block  8
call   15 never executed
call   16 never executed
    $$$$$:   24-block  9
        3:   25:                else if (!(regNumber.at(6) >= 'A' && regNumber.at(6) <= 'Z')) errors = errors + "Caracterul de pe pozitia 7 trebuie sa fie litera majuscula!\n";
        3:   25-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   25-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 2
        1:   25-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   25-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 1
        2:   25-block  4
        1:   25-block  5
        3:   25-block  6
branch 10 taken 2 (fallthrough)
branch 11 taken 1
        2:   25-block  7
call   12 returned 2
branch 13 taken 2 (fallthrough)
branch 14 taken 0 (throw)
        2:   25-block  8
call   15 returned 2
call   16 returned 2
    $$$$$:   25-block  9
        -:   26:            } else
        2:   27:                errors = errors + "'B' trebuie sa fie urmat de 3 cifre!\n";
        2:   27-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   27-block  1
call    3 returned 2
call    4 returned 2
    $$$$$:   27-block  2
        -:   28:        } else {
        -:   29:            // numar de genul B10YCZ
        5:   30:            if (!(regNumber.at(3) >= 'A' && regNumber.at(3) <= 'Z')) errors = errors + "'B' trebuie sa fie urmat de 2 cifre si 3 litere!\n";
        5:   30-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   30-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 2
        3:   30-block  2
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3:   30-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 3
        2:   30-block  4
        3:   30-block  5
        5:   30-block  6
branch 10 taken 2 (fallthrough)
branch 11 taken 3
        2:   30-block  7
call   12 returned 2
branch 13 taken 2 (fallthrough)
branch 14 taken 0 (throw)
        2:   30-block  8
call   15 returned 2
call   16 returned 2
    $$$$$:   30-block  9
        6:   31:            else if ((regNumber.at(1) >= '0' && regNumber.at(1) <= '9') &&
        3:   31-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   31-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 0
        3:   31-block  2
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3:   31-block  3
branch  8 taken 3 (fallthrough)
branch  9 taken 0
        2:   31-block  4
        1:   31-block  5
        3:   31-block  6
branch 10 taken 2 (fallthrough)
branch 11 taken 1
        3:   32:                     (regNumber.at(2) >= '0' && regNumber.at(2) <= '9')) { // avem numar de genul B100XYZ
        3:   32-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   32-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 0
        3:   32-block  2
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
        3:   32-block  3
branch  8 taken 2 (fallthrough)
branch  9 taken 1
        -:   33:                // numar de genul B10_YZ
       2*:   34:                if (!(regNumber.at(3) >= 'A' && regNumber.at(3) <= 'Z')) errors = errors + "Caracterul de pe pozitia 5 trebuie sa fie litera majuscula!\n";
        2:   34-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   34-block  1
branch  3 taken 2 (fallthrough)
branch  4 taken 0
        2:   34-block  2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2:   34-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 2
    %%%%%:   34-block  4
        2:   34-block  5
        2:   34-block  6
branch 10 taken 0 (fallthrough)
branch 11 taken 2
    %%%%%:   34-block  7
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:   34-block  8
call   15 never executed
call   16 never executed
    $$$$$:   34-block  9
        -:   35:                    // numar de genul B10X_Z
        2:   36:                else if (!(regNumber.at(4) >= 'A' && regNumber.at(4) <= 'Z')) errors = errors + "Caracterul de pe pozitia 6 trebuie sa fie litera majuscula!\n";
        2:   36-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   36-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1:   36-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   36-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 1
        1:   36-block  4
        1:   36-block  5
        2:   36-block  6
branch 10 taken 1 (fallthrough)
branch 11 taken 1
        1:   36-block  7
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
        1:   36-block  8
call   15 returned 1
call   16 returned 1
    $$$$$:   36-block  9
        -:   37:                    // numar de genul B10XY_
       1*:   38:                else if (!(regNumber.at(5) >= 'A' && regNumber.at(5) <= 'Z')) errors = errors + "Caracterul de pe pozitia 7 trebuie sa fie litera majuscula!\n";
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38-block  1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:   38-block  2
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   38-block  3
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        1:   38-block  4
    %%%%%:   38-block  5
        1:   38-block  6
branch 10 taken 1 (fallthrough)
branch 11 taken 0
        1:   38-block  7
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
        1:   38-block  8
call   15 returned 1
call   16 returned 1
    $$$$$:   38-block  9
        1:   39:            } else errors = errors + "'B' trebuie sa fie urmat de 2 cifre si 3 litere!\n";
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39-block  1
call    3 returned 1
call    4 returned 1
    $$$$$:   39-block  2
        -:   40:        }
        -:   41:    } else {
       22:   42:        if (regNumber.size() != 7)
       22:   42-block  0
call    0 returned 22
branch  1 taken 1 (fallthrough)
branch  2 taken 21
        1:   43:            errors = errors + "Numarul de inmatriculare trebuie sa fie de forma: CJ77ZZZ!\n";
        1:   43-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   43-block  1
call    3 returned 1
call    4 returned 1
    $$$$$:   43-block  2
        -:   44:        else {
       41:   45:            if ((regNumber.at(2) >= '0' && regNumber.at(2) <= '9') &&
       21:   45-block  0
call    0 returned 21
branch  1 taken 21 (fallthrough)
branch  2 taken 0 (throw)
       21:   45-block  1
branch  3 taken 20 (fallthrough)
branch  4 taken 1
       20:   45-block  2
call    5 returned 20
branch  6 taken 20 (fallthrough)
branch  7 taken 0 (throw)
       20:   45-block  3
branch  8 taken 20 (fallthrough)
branch  9 taken 0
       20:   45-block  4
        1:   45-block  5
       21:   45-block  6
branch 10 taken 20 (fallthrough)
branch 11 taken 1
       20:   46:                (regNumber.at(3) >= '0' && regNumber.at(3) <= '9')) {
       20:   46-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   46-block  1
branch  3 taken 20 (fallthrough)
branch  4 taken 0
       20:   46-block  2
call    5 returned 20
branch  6 taken 20 (fallthrough)
branch  7 taken 0 (throw)
       20:   46-block  3
branch  8 taken 20 (fallthrough)
branch  9 taken 0
      20*:   47:                if (!(regNumber.at(4) >= 'A' && regNumber.at(4) <= 'Z')) errors = errors + "Caracterul de pe pozitia 5 trebuie sa fie litera majuscula!\n";
       20:   47-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   47-block  1
branch  3 taken 20 (fallthrough)
branch  4 taken 0
       20:   47-block  2
call    5 returned 20
branch  6 taken 20 (fallthrough)
branch  7 taken 0 (throw)
       20:   47-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 20
    %%%%%:   47-block  4
       20:   47-block  5
       20:   47-block  6
branch 10 taken 0 (fallthrough)
branch 11 taken 20
    %%%%%:   47-block  7
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:   47-block  8
call   15 never executed
call   16 never executed
    $$$$$:   47-block  9
      20*:   48:                else if (!(regNumber.at(5) >= 'A' && regNumber.at(5) <= 'Z')) errors = errors + "Caracterul de pe pozitia 6 trebuie sa fie litera majuscula!\n";
       20:   48-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   48-block  1
branch  3 taken 20 (fallthrough)
branch  4 taken 0
       20:   48-block  2
call    5 returned 20
branch  6 taken 20 (fallthrough)
branch  7 taken 0 (throw)
       20:   48-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 20
    %%%%%:   48-block  4
       20:   48-block  5
       20:   48-block  6
branch 10 taken 0 (fallthrough)
branch 11 taken 20
    %%%%%:   48-block  7
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:   48-block  8
call   15 never executed
call   16 never executed
    $$$$$:   48-block  9
      20*:   49:                else if (!(regNumber.at(6) >= 'A' && regNumber.at(6) <= 'Z')) errors = errors + "Caracterul de pe pozitia 7 trebuie sa fie litera majuscula!\n";
       20:   49-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   49-block  1
branch  3 taken 20 (fallthrough)
branch  4 taken 0
       20:   49-block  2
call    5 returned 20
branch  6 taken 20 (fallthrough)
branch  7 taken 0 (throw)
       20:   49-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 20
    %%%%%:   49-block  4
       20:   49-block  5
       20:   49-block  6
branch 10 taken 0 (fallthrough)
branch 11 taken 20
    %%%%%:   49-block  7
call   12 never executed
branch 13 never executed
branch 14 never executed
    %%%%%:   49-block  8
call   15 never executed
call   16 never executed
    $$$$$:   49-block  9
        1:   50:            } else errors = errors + "Judetul trebuie sa fie urmat de 2 cifre!\n";
        1:   50-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   50-block  1
call    3 returned 1
call    4 returned 1
    $$$$$:   50-block  2
        -:   51:        }
        -:   52:    }
       33:   53:    if (!errors.empty())
       33:   53-block  0
call    0 returned 33
branch  1 taken 12 (fallthrough)
branch  2 taken 21
       12:   54:        throw ValidatorException(errors);
       12:   54-block  0
call    0 returned 12
call    1 returned 12
branch  2 taken 12 (fallthrough)
branch  3 taken 0 (throw)
       12:   54-block  1
call    4 returned 12
call    5 returned 12
call    6 returned 12
    $$$$$:   54-block  2
    $$$$$:   54-block  3
call    7 never executed
       21:   55:    return true;
       21:   55-block  0
       55:   56:}
       21:   56-block  0
call    0 returned 21
call    1 returned 21
       17:   56-block  1
call    2 returned 17
       17:   56-block  2
call    3 returned 17
        -:   57:
function _ZN9Validator16validateProducerERK3Car called 31 returned 77% blocks executed 82%
       31:   58:bool Validator::validateProducer(const Car &car) {
       31:   59:    string producer = car.getProducer(); // salvam producatorul
       31:   59-block  0
call    0 returned 31
branch  1 taken 31 (fallthrough)
branch  2 taken 0 (throw)
        -:   60:
       31:   61:    if (producer.empty())
       31:   61-block  0
call    0 returned 31
branch  1 taken 4 (fallthrough)
branch  2 taken 27
        4:   62:        throw ValidatorException("Producatorul nu poate fi vid!\n");
        4:   62-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 4 (fallthrough)
branch  4 taken 0 (throw)
        4:   62-block  1
call    5 returned 4
call    6 returned 4
call    7 returned 4
call    8 returned 4
    $$$$$:   62-block  2
call    9 never executed
    $$$$$:   62-block  3
    $$$$$:   62-block  4
    $$$$$:   62-block  5
call   10 never executed
        -:   63:
       27:   64:    string errors; // aici salvam erorile
       27:   64-block  0
call    0 returned 27
        -:   65:
       27:   66:    if (producer.at(0) < 'A' || producer.at(0) > 'Z')
call    0 returned 27
branch  1 taken 27 (fallthrough)
branch  2 taken 0 (throw)
       27:   66-block  0
branch  3 taken 27 (fallthrough)
branch  4 taken 0
       27:   66-block  1
call    5 returned 27
branch  6 taken 27 (fallthrough)
branch  7 taken 0 (throw)
       27:   66-block  2
branch  8 taken 2 (fallthrough)
branch  9 taken 25
        2:   66-block  3
       25:   66-block  4
       27:   66-block  5
branch 10 taken 2 (fallthrough)
branch 11 taken 25
        2:   67:        errors += "Producatorul trebuie sa inceapa cu majuscula!\n";
        2:   67-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   68:
      153:   69:    for (unsigned int i = 1; i < producer.size(); i++)
       27:   69-block  0
      126:   69-block  1
      153:   69-block  2
call    0 returned 153
branch  1 taken 127
branch  2 taken 26 (fallthrough)
     127*:   70:        if (!(producer.at(i) >= 'a' && producer.at(i) <= 'z') && !(producer.at(i) >= 'A' && producer.at(i) <= 'Z')) {
      127:   70-block  0
call    0 returned 127
branch  1 taken 127 (fallthrough)
branch  2 taken 0 (throw)
      127:   70-block  1
branch  3 taken 126 (fallthrough)
branch  4 taken 1
      126:   70-block  2
call    5 returned 126
branch  6 taken 126 (fallthrough)
branch  7 taken 0 (throw)
      126:   70-block  3
branch  8 taken 0 (fallthrough)
branch  9 taken 126
        1:   70-block  4
call   10 returned 1
branch 11 taken 1 (fallthrough)
branch 12 taken 0 (throw)
        1:   70-block  5
branch 13 taken 0 (fallthrough)
branch 14 taken 1
    %%%%%:   70-block  6
call   15 never executed
branch 16 never executed
branch 17 never executed
    %%%%%:   70-block  7
branch 18 never executed
branch 19 never executed
        1:   70-block  8
      126:   70-block  9
      127:   70-block 10
branch 20 taken 1 (fallthrough)
branch 21 taken 126
        1:   71:            errors += "Producatorul trebuie sa contina doar litere!\n";
        1:   71-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   72:            break;
        1:   72-block  0
        -:   73:        }
       27:   74:    if (!errors.empty())
       27:   74-block  0
call    0 returned 27
branch  1 taken 3 (fallthrough)
branch  2 taken 24
        3:   75:        throw ValidatorException(errors);
        3:   75-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   75-block  1
call    4 returned 3
call    5 returned 3
call    6 returned 3
    $$$$$:   75-block  2
    $$$$$:   75-block  3
call    7 never executed
        -:   76:
       24:   77:    return true;
       24:   77-block  0
       34:   78:}
       24:   78-block  0
call    0 returned 24
call    1 returned 24
        3:   78-block  1
call    2 returned 3
        7:   78-block  2
call    3 returned 7
        -:   79:
function _ZN9Validator13validateModelERK3Car called 30 returned 90% blocks executed 73%
       30:   80:bool Validator::validateModel(const Car &car) {
       30:   81:    string model = car.getModel(); // aici salvam modelul masinii
       30:   81-block  0
call    0 returned 30
branch  1 taken 30 (fallthrough)
branch  2 taken 0 (throw)
        -:   82:
       30:   83:    if (model.empty())
       30:   83-block  0
call    0 returned 30
branch  1 taken 3 (fallthrough)
branch  2 taken 27
        3:   84:        throw ValidatorException("Modelul nu poate sa fie vid!\n");
        3:   84-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:   84-block  1
call    5 returned 3
call    6 returned 3
call    7 returned 3
call    8 returned 3
    $$$$$:   84-block  2
call    9 never executed
    $$$$$:   84-block  3
    $$$$$:   84-block  4
    $$$$$:   84-block  5
call   10 never executed
        -:   85:
       27:   86:    return true;
       27:   86-block  0
       30:   87:}
       27:   87-block  0
call    0 returned 27
        3:   87-block  1
call    1 returned 3
        -:   88:
function _ZN9Validator12validateTypeERK3Car called 6 returned 67% blocks executed 73%
        6:   89:bool Validator::validateType(const Car &car) {
        6:   90:    string type = car.getType(); // aici salvam tipul masinii;
        6:   90-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        -:   91:
        6:   92:    if (type.empty())
        6:   92-block  0
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        2:   93:        throw ValidatorException("Tipul nu poate sa fie nul!\n");
        2:   93-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:   93-block  1
call    5 returned 2
call    6 returned 2
call    7 returned 2
call    8 returned 2
    $$$$$:   93-block  2
call    9 never executed
    $$$$$:   93-block  3
    $$$$$:   93-block  4
    $$$$$:   93-block  5
call   10 never executed
        4:   94:    return true;
        4:   94-block  0
        6:   95:}
        4:   95-block  0
call    0 returned 4
        2:   95-block  1
call    1 returned 2
        -:   96:
function _ZN9Validator11validateCarERK3CarRK12RepoAbstract called 24 returned 79% blocks executed 67%
       24:   97:bool Validator::validateCar(const Car &car, const RepoAbstract &carRepo) {
       24:   98:    string errors; // aici salvam erorile
       24:   98-block  0
call    0 returned 24
        -:   99:
        -:  100:    try {
       24:  101:        validateRegNumber(car);
call    0 returned 24
branch  1 taken 20 (fallthrough)
branch  2 taken 4 (throw)
        -:  102:    }
        4:  103:    catch (ValidatorException &validatorException) {
        4:  103-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        4:  103-block  1
call    2 returned 4
        4:  104:        errors += validatorException.getMessage();
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  104-block  0
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        4:  104-block  1
call    6 returned 4
    $$$$$:  104-block  2
call    7 never executed
    $$$$$:  104-block  3
        4:  105:    }
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  105-block  0
call    3 never executed
        -:  106:
        -:  107:    try {
       24:  108:        validateProducer(car);
       24:  108-block  0
call    0 returned 24
branch  1 taken 21 (fallthrough)
branch  2 taken 3 (throw)
        -:  109:    }
        3:  110:    catch (ValidatorException &validatorException) {
        3:  110-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        3:  110-block  1
call    2 returned 3
        3:  111:        errors += validatorException.getMessage();
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  111-block  0
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:  111-block  1
call    6 returned 3
    $$$$$:  111-block  2
call    7 never executed
    $$$$$:  111-block  3
        3:  112:    }
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  112-block  0
call    3 never executed
        -:  113:
        -:  114:    try {
       24:  115:        validateModel(car);
       24:  115-block  0
call    0 returned 24
branch  1 taken 23 (fallthrough)
branch  2 taken 1 (throw)
        -:  116:    }
        1:  117:    catch (ValidatorException &validatorException) {
        1:  117-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        1:  117-block  1
call    2 returned 1
        1:  118:        errors += validatorException.getMessage();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  118-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  118-block  1
call    6 returned 1
    $$$$$:  118-block  2
call    7 never executed
    $$$$$:  118-block  3
        1:  119:    }
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    $$$$$:  119-block  0
call    3 never executed
        -:  120:
        -:  121:    try {
       47:  122:        carRepo.findCar(car.getRegNumber());
       24:  122-block  0
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0 (throw)
       24:  122-block  1
call    3 returned 24
branch  4 taken 1 (fallthrough)
branch  5 taken 23 (throw)
        1:  122-block  2
call    6 returned 1
       23:  122-block  3
call    7 returned 23
       23:  122-block  4
        1:  123:        errors += "Masina exista deja in lista!\n";
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  124:    }
       23:  125:    catch (RepositoryException &repositoryException) {}
       23:  125-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 23
       23:  125-block  1
call    2 returned 23
call    3 returned 23
branch  4 taken 23 (fallthrough)
branch  5 taken 0 (throw)
        -:  126:
       24:  127:    if (!errors.empty())
       24:  127-block  0
call    0 returned 24
branch  1 taken 5 (fallthrough)
branch  2 taken 19
        5:  128:        throw ValidatorException(errors);
        5:  128-block  0
call    0 returned 5
call    1 returned 5
branch  2 taken 5 (fallthrough)
branch  3 taken 0 (throw)
        5:  128-block  1
call    4 returned 5
call    5 returned 5
call    6 returned 5
    $$$$$:  128-block  2
    $$$$$:  128-block  3
call    7 never executed
       19:  129:    return true;
       19:  129-block  0
       24:  130:}
       19:  130-block  0
call    0 returned 19
        5:  130-block  1
call    1 returned 5
